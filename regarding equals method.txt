In Java, the equals() method is a method defined in the Object class, which is the root class for all Java classes. It is used to compare two objects to check if they are equal or not. By default, the equals() method in the Object class compares objects based on their memory references, which means it checks whether the two objects being compared are the exact same object in memory. This behavior is often not what you want, especially when dealing with user-defined classes where you might want to compare objects based on their content.

To compare objects based on their content or attributes, you should override the equals() method in your custom class. Here's how you can do that:

Override the equals() method in your class: You should provide your own implementation of the equals() method within your custom class. This method should compare the attributes of the objects rather than their memory references.



Difference between comparing String using == and .equals() method in Java
Both equals() method and the == operator are used to compare two objects in Java. == is an operator and equals() is method. But == operator compares reference or memory location of objects in a heap, whether they point to the same location or not.
Whenever we create an object using the operator new, it will create a new memory location for that object. So we use the == operator to check memory location or address of two objects are the same or not.

In general, both equals() and “==” operators in Java are used to compare objects to check equality, but here are some of the differences between the two: 

The main difference between the .equals() method and == operator is that one is a method, and the other is the operator.
We can use == operators for reference comparison (address comparison) and .equals() method for content comparison. In simple words, == checks if both objects point to the same memory location whereas .equals() evaluates to the comparison of values in the objects.
If a class does not override the equals method, then by default, it uses the equals(Object o) method of the closest parent class that has overridden this method.
